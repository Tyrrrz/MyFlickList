// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace MyFlickList.Api.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("unaccent")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MyFlickList.Api.Database.Auth.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<string>("UsernameNormalized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailNormalized")
                        .IsUnique();

                    b.HasIndex("UsernameNormalized")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Files.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Flicks.FlickEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CoverImageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("integer");

                    b.Property<string[]>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<double?>("ExternalRating")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("FirstAired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("LastAired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Runtime")
                        .HasColumnType("interval");

                    b.Property<string>("Synopsis")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId")
                        .IsUnique();

                    b.ToTable("Flicks");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Profiles.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AvatarImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string[]>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Profiles.ProfileFlickEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("integer");

                    b.Property<int>("FlickId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlickId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFlickEntries");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Profiles.ProfileEntity", b =>
                {
                    b.HasOne("MyFlickList.Api.Database.Auth.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MyFlickList.Api.Database.Profiles.ProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Profiles.ProfileFlickEntryEntity", b =>
                {
                    b.HasOne("MyFlickList.Api.Database.Flicks.FlickEntity", "Flick")
                        .WithMany("ProfileEntries")
                        .HasForeignKey("FlickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFlickList.Api.Database.Profiles.ProfileEntity", "Profile")
                        .WithMany("FlickEntries")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flick");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Auth.UserEntity", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Flicks.FlickEntity", b =>
                {
                    b.Navigation("ProfileEntries");
                });

            modelBuilder.Entity("MyFlickList.Api.Database.Profiles.ProfileEntity", b =>
                {
                    b.Navigation("FlickEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
